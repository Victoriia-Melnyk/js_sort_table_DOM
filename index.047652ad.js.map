{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCGA,I,EAAM,EAAc,AADN,SAAS,aAAa,CAAC,SACX,gBAAgB,CAAC,YAErC,EAAO,SAAS,aAAa,CAAC,SAC9B,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAe,EAAK,IAAI,G,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAuB9B,SAAS,EAAqB,CAAK,EAGjC,IAAK,IAFD,EAAS,GAEJ,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IACf,MAAb,CAAK,CAAC,EAAE,EAAY,AAAa,MAAb,CAAK,CAAC,EAAE,EAC9B,CAAA,GAAU,CAAK,CAAC,EAAE,AAAF,EAIpB,OAAO,CACT,CA/BA,EAAY,OAAO,CAAC,SAAC,CAAA,CAAQ,CAA7B,EACE,EAAO,gBAAgB,CAAC,QAAS,WAC/B,EAAS,IAAI,CAAC,SAAC,CAAA,CAAM,CAArB,EACE,IAAM,EAAQ,EAAK,QAAQ,CAAC,EAAM,CAAC,WAAW,CAAC,IAAI,GAC7C,EAAQ,EAAK,QAAQ,CAAC,EAAM,CAAC,WAAW,CAAC,IAAI,UAEnD,AAAI,AAAC,MAAM,IAAW,MAAM,GAEjB,AAAU,IAAV,EAIF,AAHS,WAAW,EAAqB,IAChC,WAAW,EAAqB,IAIzC,EAAM,aAAa,CAAC,GAPpB,EAAQ,CASnB,GACA,EAAS,OAAO,CAAC,SAAC,CAAlB,EAA0B,OAAA,EAAK,WAAW,CAAC,E,EAC7C,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\nvar headerCells = table.querySelectorAll(\"thead th\");\nvar body = document.querySelector(\"tbody\");\nvar bodyRows = _to_consumable_array(body.rows);\nheaderCells.forEach(function(header, index) {\n    header.addEventListener(\"click\", function() {\n        bodyRows.sort(function(rowA, rowB) {\n            var cellA = rowA.children[index].textContent.trim();\n            var cellB = rowB.children[index].textContent.trim();\n            if (!isNaN(cellA) && !isNaN(cellB)) return cellA - cellB;\n            else if (index === 3) {\n                var salaryA = parseFloat(removeDollarAndComma(cellA));\n                var salaryB = parseFloat(removeDollarAndComma(cellB));\n                return salaryA - salaryB;\n            } else return cellA.localeCompare(cellB);\n        });\n        bodyRows.forEach(function(row) {\n            return body.appendChild(row);\n        });\n    });\n});\nfunction removeDollarAndComma(value) {\n    var result = \"\";\n    for(var i = 0; i < value.length; i++)if (value[i] !== \"$\" && value[i] !== \",\") result += value[i];\n    return result;\n}\n\n//# sourceMappingURL=index.047652ad.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst headerCells = table.querySelectorAll('thead th');\n\nconst body = document.querySelector('tbody');\nconst bodyRows = [...body.rows];\n\nheaderCells.forEach((header, index) => {\n  header.addEventListener('click', () => {\n    bodyRows.sort((rowA, rowB) => {\n      const cellA = rowA.children[index].textContent.trim();\n      const cellB = rowB.children[index].textContent.trim();\n\n      if (!isNaN(cellA) && !isNaN(cellB)) {\n        return cellA - cellB;\n      } else if (index === 3) {\n        const salaryA = parseFloat(removeDollarAndComma(cellA));\n        const salaryB = parseFloat(removeDollarAndComma(cellB));\n\n        return salaryA - salaryB;\n      } else {\n        return cellA.localeCompare(cellB);\n      }\n    });\n    bodyRows.forEach((row) => body.appendChild(row));\n  });\n});\n\nfunction removeDollarAndComma(value) {\n  let result = '';\n\n  for (let i = 0; i < value.length; i++) {\n    if (value[i] !== '$' && value[i] !== ',') {\n      result += value[i];\n    }\n  }\n\n  return result;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","headerCells","table","document","querySelector","querySelectorAll","body","bodyRows","_array_without_holes","isArray","rows","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","removeDollarAndComma","value","result","forEach","header","index","addEventListener","sort","rowA","rowB","cellA","children","textContent","trim","cellB","isNaN","salaryA","parseFloat","localeCompare","row","appendChild"],"version":3,"file":"index.047652ad.js.map"}